
--------------------- bfs ----------------------------

function bfs(graph, startNode) {
    let queue = [startNode];
    let visited = new Set();

    visited.add(startNode);

    while (queue.length > 0) {
        let currentNode = queue.shift();
        console.log(currentNode);

        for (let neighbor of graph[currentNode]) {
            if (!visited.has(neighbor)) {
                visited.add(neighbor);
                queue.push(neighbor);
            }
        }
    }
}

// Run BFS
bfs(graph, 'A');

--------------- end -----------------
******************************************************************************
------------------ dfs -----------------

function dfsIterative(graph, startNode) {
    let stack = [startNode];
    let visited = new Set();

    visited.add(startNode);

    while (stack.length > 0) {
        let currentNode = stack.pop();
        console.log(currentNode);

        for (let neighbor of graph[currentNode]) {
            if (!visited.has(neighbor)) {
                visited.add(neighbor);
                stack.push(neighbor);
            }
        }
    }
}

// Run Iterative DFS
dfsIterative(graph, 'A');

------------- end ---------------

***************************************************************************

-------------- recursive aproche -----------

function dfsRecursive(graph, node, visited = new Set()) {
    if (!visited.has(node)) {
        console.log(node);
        visited.add(node);

        for (let neighbor of graph[node]) {
            dfsRecursive(graph, neighbor, visited);
        }
    }
}

// Run Recursive DFS
dfsRecursive(graph, 'A');

------------------- end ----------------

